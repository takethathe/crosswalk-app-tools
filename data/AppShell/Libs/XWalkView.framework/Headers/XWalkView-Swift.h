// Generated by Swift version 1.1 (swift-600.0.56.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import WebKit;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface WKUserContentController (SWIFT_EXTENSION(XWalkView))
@end

@class NSThread;
@class NSURL;
@class WKNavigation;

@interface WKWebView (SWIFT_EXTENSION(XWalkView))
@property (nonatomic) NSThread * extensionThread;
- (void)loadExtension:(id)object namespace:(NSString *)namespace thread:(NSThread *)thread;
- (WKNavigation *)loadFileURL:(NSURL *)URL allowingReadAccessToURL:(NSURL *)readAccessURL;
@end

@class XWalkReflection;
@class WKScriptMessage;
@class NSError;

SWIFT_CLASS("_TtC9XWalkView12XWalkChannel")
@interface XWalkChannel : NSObject <WKScriptMessageHandler>
@property (nonatomic) XWalkReflection * mirror;
@property (nonatomic, readonly, copy) NSString * name;
@property (nonatomic, readonly, weak) WKWebView * webView;
@property (nonatomic, readonly) NSThread * thread;
@property (nonatomic, readonly, copy) NSString * namespace;
- (instancetype)initWithWebView:(WKWebView *)webView name:(NSString *)name OBJC_DESIGNATED_INITIALIZER;
- (void)bind:(id)object namespace:(NSString *)namespace thread:(NSThread *)thread;
- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)didReceiveScriptMessage;
- (void)evaluateJavaScript:(NSString *)string completionHandler:(void (^)(id, NSError *))completionHandler;
@end


SWIFT_CLASS("_TtC9XWalkView21XWalkExtensionFactory")
@interface XWalkExtensionFactory
+ (BOOL)register:(NSString *)name cls:(Class)cls;
+ (id)createExtension:(NSString *)name;
+ (id)createExtension:(NSString *)name initializer:(SEL)initializer arguments:(NSArray *)arguments;
@end


SWIFT_CLASS("_TtC9XWalkView15XWalkReflection")
@interface XWalkReflection
@property (nonatomic, readonly, copy) NSArray * allMembers;
@property (nonatomic, readonly, copy) NSArray * allMethods;
@property (nonatomic, readonly, copy) NSArray * allProperties;
- (BOOL)hasMember:(NSString *)name;
- (BOOL)hasMethod:(NSString *)name;
- (BOOL)hasProperty:(NSString *)name;
- (BOOL)isReadonly:(NSString *)name;
@property (nonatomic, readonly) SEL constructor;
- (SEL)getMethod:(NSString *)name;
- (SEL)getGetter:(NSString *)name;
- (SEL)getSetter:(NSString *)name;
@end

#pragma clang diagnostic pop
